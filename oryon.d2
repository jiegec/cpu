cpu : Qualcomm Oryon CPU {
  frontend: Frontend {
    bp: Branch Predictor {
      # Source: Chips and Cheese
      # Source: Qualcomm, 2Ke+
      l1btb: 2048-entry L1 BTB, 1 cycle latency

      # Source: Chips and Cheese
      l2btb: 192KB 6-way L1 IC as L2 BTB, 3 cycle latency

      # Source: Chips and Cheese
      ind: 2048-entry Indirect Target Buffer

      # Source: Qualcomm
      cond: 80KB Conditional Predictor

      # Source: Qualcomm
      indir: 40KB Indirect Predictor

      # Source: Chips and Cheese
      # Source: jiegec, 50
      # Source: Qualcomm, 50e
      ras: 50-entry RAS
    }

    # Decoupled Frontend
    fq: Fetch Queue
    bp -> fq

    l1ic: L1 IC {
      # Source: Chips and Cheese
      # Source: Qualcomm
      itlb: 256-entry 8-way ITLB, 1 cycle latency

      # Source: Chips and Cheese, Anandtech
      # Source: Qualcomm
      l1ic: 192KB 6-way L1 IC
    }

    fq -> l1ic

    iq: Instruction Queue
    l1ic -> iq: 16 inst/cycle

    # Source: Chips and Cheese, Anandtech
    decode: 8-way Decode
    iq -> decode

    # Source: Chips and Cheese
    uop: UOP Queue
    decode -> uop

    # Source: Chips and Cheese
    rename: 8-way Rename
    uop -> rename
  }

  backend: Backend {
    # Source: Chips and Cheese
    # Source: Qualcomm, 650+
    rob: 680-entry ROB, retire 8/cycle

    # Source: jiegec
    bob: 119-entry ROB

    rf: Register File {
      # Source: Chips and Cheese
      # Source: Qualcomm, 400+
      irf: 384 + 32-entry Integer Register File

      # Source: Chips and Cheese
      # Source: Qualcomm, 400+
      vrf: 384 + 32-entry 128b Vector Register File

    }

    # Source: Chips and Cheese, Anandtech
    # Source: Qualcomm, each with a 20e queue
    sched1: 20-entry ALU Scheduler \#1

    # Source: Chips and Cheese
    pipe1: Pipe \#1 {
      ALU
      Direct Branch
      Indirect Branch
    }
    sched1 -> rf.irf -> pipe1

    # Source: Chips and Cheese
    sched2: 20-entry ALU Scheduler \#2

    # Source: Chips and Cheese
    pipe2: Pipe \#2 {
      ALU
      Direct Branch
    }
    sched2 -> rf.irf -> pipe2

    # Source: Chips and Cheese
    sched3: 20-entry ALU Scheduler \#3

    # Source: Chips and Cheese
    pipe3: Pipe \#3 {
      ALU
      Crypto
      CRC
    }
    sched3 -> rf.irf -> pipe3

    # Source: Chips and Cheese
    sched4: 20-entry ALU Scheduler \#4

    # Source: Chips and Cheese
    pipe4: Pipe \#4 {
      ALU
    }
    sched4 -> rf.irf -> pipe4

    # Source: Chips and Cheese
    sched5: 20-entry ALU Scheduler \#5

    # Source: Chips and Cheese
    pipe5: Pipe \#5 {
      ALU
      INT MUL
      I2V
    }
    sched5 -> rf.irf -> pipe5

    # Source: Chips and Cheese
    sched6: 20-entry ALU Scheduler \#6

    # Source: Chips and Cheese
    pipe6: Pipe \#6 {
      ALU
      INT MUL
      INT DIV
      I2V
    }
    sched6 -> rf.irf -> pipe6

    # Source: Chips and Cheese, Anandtech
    # Source: Qualcomm, each with a 16e queue
    sched7: 16-entry Memory Scheduler \#7

    # Source: Chips and Cheese
    pipe7: Pipe \#7 {
      AGU
      Load
      Store
    }
    sched7 -> rf.irf -> pipe7

    # Source: Chips and Cheese
    sched8: 16-entry Memory Scheduler \#8

    # Source: Chips and Cheese
    pipe8: Pipe \#8 {
      AGU
      Load
      Store
    }
    sched8 -> rf.irf -> pipe8

    # Source: Chips and Cheese
    sched9: 16-entry Memory Scheduler \#9

    # Source: Chips and Cheese
    pipe9: Pipe \#9 {
      AGU
      Load
      Store
    }
    sched9 -> rf.irf -> pipe9

    # Source: Chips and Cheese
    sched10: 16-entry Memory Scheduler \#10

    # Source: Chips and Cheese
    pipe10: Pipe \#10 {
      AGU
      Load
      Store
    }
    sched10 -> rf.irf -> pipe10

    lsu: LSU {
      # Source: Chips and Cheese, Anandtech, Qualcomm
      192-entry Load Queue
      56-entry Store Queue
      # Source: Chips and Cheese
      2 Load Pipe
      2 Load/Store Pipe
    }

    pipe7 -> lsu
    pipe8 -> lsu
    pipe9 -> lsu
    pipe10 -> lsu

    rob -> sched1
    rob -> sched2
    rob -> sched3
    rob -> sched4
    rob -> sched5
    rob -> sched6
    rob -> sched7
    rob -> sched8
    rob -> sched9
    rob -> sched10

    # Source: Chips and Cheese, Anandtech
    # Source: Qualcomm, each with a 48e queue
    sched11: 48-entry FP Scheduler \#11

    # Source: Chips and Cheese
    pipe11: Pipe \#11 {
      128b ALU
      NEON
      V2I
    }
    sched11 -> rf.vrf -> pipe11

    # Source: Chips and Cheese
    sched12: 48-entry FP Scheduler \#12

    # Source: Chips and Cheese
    pipe12: Pipe \#12 {
      128b ALU
      NEON
      V2I
    }
    sched12 -> rf.vrf -> pipe12

    # Source: Chips and Cheese
    sched13: 48-entry FP Scheduler \#13

    # Source: Chips and Cheese
    pipe13: Pipe \#13 {
      128b ALU
      NEON
    }
    sched13 -> rf.vrf -> pipe13

    # Source: Chips and Cheese
    sched14: 48-entry FP Scheduler \#14

    # Source: Chips and Cheese
    pipe14: Pipe \#14 {
      128b ALU
      NEON
      FDIV
      FSQRT
    }
    sched14 -> rf.vrf -> pipe14
    rob -> sched11
    rob -> sched12
    rob -> sched13
    rob -> sched14
  }
  frontend.rename -> backend.rob
  frontend.rename -> backend.bob

  mem: Memory {
    l1: L1 DC {
      # Source: Chips and Cheese, Anandtech, Qualcomm
      l1dtlb: 224-entry 7-way L1 DTLB, 1 cycle latency

      # Source: Chips and Cheese, Anandtech
      l1dc: 96KB 6-way L1DC, 56-entry MSHR
    }

    l2: L2 {
      # Source: Chips and Cheese
      l2tlb: 8192-entry 8-way L2 TLB

      # Source: Chips and Cheese, Anandtech
      l2dc: 12MB 12-way L2 Cache per 4-Core Cluster
    }
    l1 -> l2: 64B/cycle

    # Source: Chips and Cheese, Anandtech
    slc: 6MB System Level Cache
    l2 -> slc: 32B/cycle

    # Source: Anandtech
    dram: LPDDR5x 8448 MT/s, 8x 16b
    slc -> dram
  }
  frontend.l1ic -> mem.l2
  backend.lsu -> mem.l1

  info: |md
    Drawn by Jiajie Chen @jiegec

    Based on data from Chips and Cheese, Anandtech and Qualcomm
  |
}