cpu : Intel Alder Lake Golden Cove CPU {
  frontend: Frontend {
    bp: Branch Predictor {
      # Source: Chips and Cheese
      l1btb: 128-entry L1 BTB

      # Source: Chips and Cheese
      l2btb: 6144-entry L2 BTB

      # Source: Chips and Cheese, Intel
      l3btb: 12288-entry L3 BTB

      # Source: jiegec, see /data/golden_cove/ras.csv
      ras: 20-entry RAS
    }

    l1ic: L1 IC {
      # Source: Chips and Cheese, Intel
      itlb: 256-entry 8-way ITLB

      # Source: Chips and Cheese
      # Source: lscpu -C
      l1ic: 32KB 8-way L1 IC
    }

    bp -> l1ic

    iq: Instruction Queue
    l1ic -> iq

    # Source: Chips and Cheese
    decode: 6-way Decode
    iq -> decode

    # Source: Chips and Cheese, Intel
    uopc: 4096-entry UOP Cache
    decode -> uopc
    bp -> uopc

    # Source: Chips and Cheese
    # Source: Intel, called allocation queue
    uop: 2x 72-entry UOP Queue
    uopc -> uop
    decode -> uop

    # Source: Chips and Cheese, Intel
    rename: 6-way Rename {
      Move Elimination
      Zero Idiom
    }
    uop -> rename
  }

  backend: Backend {
    # Source: Chips and Cheese, Intel
    rob: 512-entry ROB

    # Source: Chips and Cheese
    bob: 128-entry Branch Order Buffer

    rf: Register File {
      # Source: Chips and Cheese: 280
      # Source: Intel, 288
      # Source: jiegec, 247 speculative
      irf: 288-entry Integer Register File

      # Source: Chips and Cheese
      # Source: jiegec, 247 speculative
      flagsrf: 248-entry Flags Register File

      # Source: Chips and Cheese, 332
      # Source: Intel, 220 (512b), 320 (256b)
      # Source: jiegec, 296 speculative
      vrf: 332-entry FP/Vector Register File

      # Source: Chips and Cheese
      mxscrrf: 8-entry MXCSR Register File

      # Source: Chips and Cheese
      maskrf: Mask Register File
    }

    # Source: Chips and Cheese
    # Source: jiegec, 97 sched size for alu
    # Source: Intel, 248 scheduler entries in total (248>205=97+70+38)
    sched1: 97-entry Unified Math Scheduler

    # Source: uops.info, perfmon.intel.com, Intel
    # 12 ports in total: Port 0 to Port 11
    # FP: Port 0, Port 1, Port 5
    # Integer/Memory:
    # Port 2 = Port 3 = Port 10: Load AGU
    # Port 4 = Port 9: Store Data
    # Port 7 = Port 8: Store AGU
    # ALU(add): Port 0, 1, 5, 6, 11
    # LEA(lea): Port 0, 1, 5, 6, 11
    # Shift(shl): Port 0, 6
    # INT MUL(imul): Port 1
    # INT MUL(imul 64b*64b=128b): Port 1(LO) + Port 5(HI)
    # JMP/Branch(jmp/jnz): Port 0, 6
    # Load(mov): Port 2, 3, 10
    # Store(mov): Data(Port 4, 9) + AGU(Port 7, 8)
    # 256-bit ALU(VPADDD YMM): Port 0, 1, 5
    # 256-bit FMA(VFMADD132PD YMM): Port 0, 1
    # 256-bit FADD(VADDPS YMM): Port 1, 5
    # 256-bit FDIV(VDIVPS YMM): Port 0
    # 256-bit Shuffle(VPSHUFD YMM): Port 1, 5
    # 256-bit Shift(VPSLLD YMM): Port 0, 1
    
    # Source: Chips and Cheese, Intel
    pipe1: Port 0 {
      grid-columns: 1
      ALU
      LEA
      Shift
      Jump/Branch
      256b ALU
      256b FDIV
      256b FMA
      256b Shift
    }
    rob -> sched1 -> rf -> pipe1

    # Source: Chips and Cheese, Intel
    pipe2: Port 1 {
      grid-columns: 1
      ALU
      LEA
      INT MUL
      INT DIV
      256b ALU
      256b FADD
      256b FMA
      256b Shift
      256b Shuffle
    }
    rob -> sched1 -> rf -> pipe2

    # Source: Chips and Cheese, Intel
    pipe3: Port 5 {
      grid-columns: 1
      ALU
      LEA
      INT MUL HI
      # Found in Intel paper, but AVX512/AMX was disabled to maintain the same ISA as E-core:
      # 512b FMA
      # AMX
      256b ALU
      256b FADD
      256b Shuffle
    }
    rob -> sched1 -> rf -> pipe3

    # Source: Chips and Cheese, Intel
    pipe4: Port 6 {
      grid-columns: 1
      ALU
      LEA
      Shift
      Jump/Branch
    }
    rob -> sched1 -> rf -> pipe4

    # Source: Chips and Cheese, Intel
    # Figure 1 in Intel paper was wrong, should be Port 11 instead of Port 10
    pipe5: Port 11 {
      grid-columns: 1
      ALU
      LEA
    }
    rob -> sched1 -> rf -> pipe5

    # Source: Chips and Cheese
    # Source: jiegec, 69 sched size for load
    sched2: 70-entry Load Scheduler

    # Source: Chips and Cheese, Intel
    pipe6: Port 2 {
      Load AGU
    }
    rob -> sched2 -> rf -> pipe6

    # Source: Chips and Cheese, Intel
    pipe7: Port 3 {
      Load AGU
    }
    rob -> sched2 -> rf -> pipe7

    # Source: Chips and Cheese, Intel
    # Figure 1 in Intel paper was wrong, should be Port 10 instead of Port 11
    pipe8: Port 10 {
      Load AGU
    }
    rob -> sched2 -> rf -> pipe8

    # Source: Chips and Cheese
    # Source: jiegec, 40 sched size for store
    sched3: 38-entry Store Scheduler

    # Source: Chips and Cheese, Intel
    pipe9: Port 7 {
      Store AGU
    }
    rob -> sched3 -> rf -> pipe9

    # Source: Chips and Cheese, Intel
    pipe10: Port 8 {
      Store AGU
    }
    rob -> sched3 -> rf -> pipe10

    # Source: Chips and Cheese, Intel
    pipe11: Port 4 {
      Store Data
    }
    rob -> sched3 -> rf -> pipe11

    # Source: Chips and Cheese, Intel
    pipe12: Port 9 {
      Store Data
    }
    rob -> sched3 -> rf -> pipe12

    lsu: LSU {
      # Source: Chips and Cheese, 192 Load + 114 store
      # Source: Intel, 240 Load + 112 Store
      240-entry Load Queue
      112-entry Store Queue
    }

    pipe6 -> lsu
    pipe7 -> lsu
    pipe8 -> lsu
    pipe9 -> lsu
    pipe10 -> lsu
    pipe11 -> lsu
    pipe12 -> lsu
  }
  frontend.rename -> backend.rob
  frontend.rename -> backend.bob

  mem: Memory {
    l1: L1 DC {
      # Source: Chips and Cheese, Intel
      l1dtlb: 96-entry 6-way L1 DTLB

      # Source: Chips and Cheese, Intel
      # Source: lscpu -C
      l1dc: 48KB 12-way L1DC

      # Source: Chips and Cheese, Intel
      mshr: 16-entry MSHR

      # Source: Chips and Cheese, Intel
      ptw: 4 page table walkers
    }

    l2: L2 {
      # Source: Chips and Cheese, Intel
      l2tlb: 2048-entry L2 TLB

      # Source: Chips and Cheese, Intel
      # Source: lscpu -C
      l2dc: 1280KB(client), 2048KB(server) L2 Cache, 15 cycle latency

      # Source: Chips and Cheese
      mshr: 48-entry MSHR
    }

    # Source: Chips and Cheese, Intel
    l1 -> l2: 64B/cycle

    l3: L3 {
      # Source: Chips and Cheese
      # Source: lscpu -C
      l3dc: 30MB L3 Cache
    }
    l2 -> l3
  }
  frontend.l1ic -> mem.l2
  backend.lsu -> mem.l1

  info: |md
    Drawn by Jiajie Chen @jiegec

    Based on data from Chips and Cheese, Intel
  |
}