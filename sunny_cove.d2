cpu : Intel Ice Lake Sunny Cove CPU {
  frontend: Frontend {
    bp: Branch Predictor {
      # Source: Chips and Cheese
      l1btb: 256-entry L1 BTB

      # Source: Chips and Cheese
      l2btb: 5120-entry L2 BTB

      # Source: Chips and Cheese
      ras: 22-entry RAS
    }

    l1ic: L1 IC {
      # Source: Chips and Cheese
      itlb: 128-entry 8-way ITLB

      # Source: Chips and Cheese
      l1ic: 32KB 8-way L1 IC
    }

    bp -> l1ic

    # Source: Chips and Cheese
    iq: 2x 25-entry Instruction Queue
    l1ic -> iq

    # Source: Chips and Cheese
    decode: 4-way Decode
    iq -> decode

    # Source: Chips and Cheese
    uopc: 2304-entry UOP Cache
    decode -> uopc
    bp -> uopc

    # Source: Chips and Cheese
    uop: 2x 70-entry UOP Queue
    uopc -> uop
    decode -> uop

    # Source: Chips and Cheese
    rename: 5-way Rename {
      Move Elimination
      Zero Idiom
    }
    uop -> rename
  }

  backend: Backend {
    # Source: Chips and Cheese
    rob: 352-entry ROB

    # Source: Chips and Cheese
    bob: 96-entry Branch Order Buffer

    rf: "" {
      # Source: Chips and Cheese
      irf: 280-entry Integer Register File

      # Source: Chips and Cheese
      vrf: 224-entry FP/Vector Register File

      # Source: Chips and Cheese
      mxscrrf: 8-entry MXCSR Register File

      # Source: Chips and Cheese
      maskrf: 152-entry Mask Register File
    }

    # Source: uops.info
    # 10 ports in total: Port 0 to Port 9
    # Integer/Memory:
    # Port 2 = Port 3: Load AGU
    # Port 4 = Port 9: Store Data
    # Port 7 = Port 8: Store AGU
    # ALU(add): Port 0, 1, 5, 6
    # LEA(lea): Port 0, 1, 5, 6
    # Shift(shl): Port 0, 6
    # INT MUL(imul): Port 1
    # INT MUL(imul 64b*64b=128b): Port 1(LO) + Port 5(HI)
    # INT DIV(idiv): (Port 0, 1, 5, 6) + Port 1
    # JMP/Branch(jmp/jnz): Port 0, 6
    # Load(mov): Port 2, 3
    # Store(mov): Data(Port 4, 9) + AGU(Port 7, 8)
    # 256-bit ALU(VPADDD YMM): Port 0, 1, 5
    # 512-bit ALU(VPADDD ZMM): Port 0, 5
    # 256-bit FMA(VFMADD132PD YMM): Port 0, 1
    # 512-bit FMA(VFMADD132PD ZMM): Port 0
    # 256-bit FADD(VADDPS YMM): Port 0, 1
    # 512-bit FADD(VADDPS ZMM): Port 0
    # 256-bit FDIV(VDIVPS YMM): Port 0
    # 256-bit Shuffle(VPSHUFD YMM): Port 1, 5
    # 512-bit Shuffle(VPSHUFD ZMM): Port 5
    # 256-bit Shift(VPSLLD YMM): Port 0, 1
    # 512-bit Shift(VPSLLD YMM): Port 0

    # Source: Chips and Cheese
    sched1: 80-entry Unified Math Scheduler

    # Source: Chips and Cheese
    pipe1: Port 0 {
      grid-columns: 1
      ALU
      LEA
      Shift
      Jump/Branch
      512b ALU
      512b FADD
      512b FMA
      512b Shift
    }
    rob -> sched1 -> rf -> pipe1

    # Source: Chips and Cheese
    pipe2: Port 1 {
      grid-columns: 1
      ALU
      LEA
      INT MUL
      INT DIV
      256b ALU
      256b FADD
      256b FMA
      256b Shift
      256b Shuffle
    }
    rob -> sched1 -> rf -> pipe2

    # Source: Chips and Cheese
    pipe3: Port 5 {
      grid-columns: 1
      ALU
      LEA
      INT MUL HI
      512b ALU
      512b Shuffle
    }
    rob -> sched1 -> rf -> pipe3

    # Source: Chips and Cheese
    pipe4: Port 6 {
      grid-columns: 1
      ALU
      LEA
      Shift
      Jump/Branch
    }
    rob -> sched1 -> rf -> pipe4

    # Source: Chips and Cheese
    sched2: 34-entry Store Data Scheduler

    # Source: Chips and Cheese
    pipe5: Port 4 {
      Store Data
    }
    rob -> sched2 -> rf -> pipe5

    # Source: Chips and Cheese
    pipe6: Port 9 {
      Store Data
    }
    rob -> sched2 -> rf -> pipe6

    # Source: Chips and Cheese
    sched3: 23-entry AGU Scheduler \#1

    # Source: Chips and Cheese
    pipe7: Port 2 {
      Load AGU
    }
    rob -> sched3 -> rf -> pipe7

    # Source: Chips and Cheese
    pipe8: Port 8 {
      Store AGU
    }
    rob -> sched3 -> rf -> pipe8

    # Source: Chips and Cheese
    sched4: 23-entry AGU Scheduler \#2

    # Source: Chips and Cheese
    pipe9: Port 3 {
      Load AGU
    }
    rob -> sched4 -> rf -> pipe9

    # Source: Chips and Cheese
    pipe10: Port 7 {
      Store AGU
    }
    rob -> sched4 -> rf -> pipe10

    lsu: LSU {
      # Source: Chips and Cheese
      128-entry Load Queue
      72-entry Store Queue
    }

    pipe5 -> lsu
    pipe6 -> lsu
    pipe7 -> lsu
    pipe8 -> lsu
    pipe9 -> lsu
    pipe10 -> lsu
  }
  frontend.rename -> backend.rob
  frontend.rename -> backend.bob

  mem: Memory {
    l1: L1 DC {
      # Source: Chips and Cheese
      l1dtlb: 64-entry load, 16-entry store L1 DTLB

      # Source: Chips and Cheese
      l1dc: 48KB 12-way L1DC

      # Source: Chips and Cheese
      mshr: 12-entry MSHR
    }

    l2: L2 {
      # Source: Chips and Cheese
      l2tlb: 2048-entry L2 TLB

      # Source: Chips and Cheese
      l2dc: 512 KB 8-way/1280 KB 20-way L2 DC

      # Source: Chips and Cheese
      mshr: 32-entry MSHR
    }

    # Source: Chips and Cheese
    l1 -> l2: 64B/cycle

    l3: L3 {
      # Source: Chips and Cheese
      l3dc: L3 Cache
    }
    l2 -> l3
  }
  frontend.l1ic -> mem.l2
  backend.lsu -> mem.l1

  info: |md
    Drawn by Jiajie Chen @jiegec

    Based on data from Chips and Cheese
  |
}