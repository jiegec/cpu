cpu: AMD Zen2 CPU {
  frontend: Frontend {
    bp: Branch Predictor {
      # Source: Chips and Cheese, AMD
      # "L0BTB holds 8 forward taken branches and 8 backward taken branches, and
      # predicts with zero bubbles. L1BTB has 512 entries and creates one bubble
      # if prediction differs from L0BTB. L2BTB has 7168 entries and creates
      # four bubbles if its prediction differs from L1BTB."
      l1btb: 16-entry(8 forward, 8 backward) L1 BTB, zero bubbles

      # Source: Chips and Cheese, AMD
      l2btb: 512-entry L2 BTB, one bubble

      # Source: Chips and Cheese, AMD
      l3btb: 7168-entry L3 BTB, four bubbles

      # Source: Chips and Cheese, AMD
      # "The processor implements a 1024-entry indirect target array"
      indir: 1024-entry Indirect Target Array

      # Source: Chips and Cheese, AMD
      # "The processor implements a 32-entry return address stack (RAS)"
      ras: 32-entry Return Address Stack

      # Source: AMD
      hp: hashed perceptron L1 branch predictor

      # Source: AMD
      tage: TAGE L2 branch predictor

      # Source: AMD
      penalty: 12-18 cycle branch misprediction latency, 16 typical
    }

    l1ic: L1 IC {
      # Source: Chips and Cheese, AMD
      l1itlb: 64-entry L1 ITLB

      # Source: Chips and Cheese, AMD
      l2itlb: 512-entry L2 ITLB

      # Source: Chips and Cheese, AMD
      l1ic: 32KB 8-way L1 IC
    }

    # Source: Chips and Cheese
    fq: 64-entry Fetch Queue
    bp -> fq
    fq -> l1ic

    # Source: AMD
    # "The fetch unit sends these bytes to the decode unit through a 20 entry
    # Instruction Byte Queue (IBQ), each entry holding 16 instruction bytes. In
    # SMT mode each thread has 10 dedicated IBQ entries."
    iq: 20x 16B Instruction Byte Queue
    # Source: AMD
    # "The processor fetches instructions from the instruction cache in 32-byte
    # naturally aligned blocks. The processor can perform an instruction block
    # fetch every cycle."
    l1ic -> iq: 32 B/cyc

    # Source: Chips and Cheese, AMD
    # AMD: "The decode unit scans two of these windows in a given cycle, decoding a
    # maximum of four instructions."
    decode: 4-way Decode, sideband stack optimizer
    iq -> decode: 2 IBQ entry

    # Source: Chips and Cheese, AMD
    # "The op cache is organized as an associative cache with 32 sets and 8
    # ways. At each set-way intersection is an entry containing up to 8
    # instructions"
    uopc: 512-entry 8-way, 8 inst/entry UOP Cache
    decode -> uopc
    bp -> uopc

    # Source: Chips and Cheese
    # Source: AMD
    # "the maximum throughput from the op cache is 8 instructions per cycle
    # whereas the maximum throughput from the traditional fetch and decode
    # pipeline is 4 instructions per cycle."
    uop: UOP Queue
    uopc -> uop: 8 inst/cycle
    decode -> uop: 4 inst/cycle

    # Source: Chips and Cheese
    rename: 5-way Rename {
      Move Elimination
      Zero Idiom
    }
    uop -> rename
  }

  backend: Backend {
    # Source: Chips and Cheese
    # Source: AMD
    # "The unit can receive up to 6 macro ops dispatched per cycle and track up
    # to 224 macro ops in-flight"
    # "The retire unit handles in-order commit of up to eight macro ops per
    # cycle."
    rob: 224-entry ROB, retire 8 op/cycle

    # Source: Chips and Cheese, jiegec
    # Chips and Cheese: 32 taken, 128 not taken
    # jiegec: 32 taken, no limit observed for not taken branch
    bob: 32-taken-entry Branch Order Buffer

    rf: Register File {
      # Source: Chips and Cheese
      # Source: AMD
      # "The integer physical register file (PRF) consists of 180 registers,
      # with up to 38 per thread mapped to architectural state or
      # microarchitectural temporary state."
      # Source: jiegec, 132 speculative
      irf: 180-entry Integer Register File

      # Source: jiegec, 138 speculative
      flagsrf: 138-entry Flags Register File

      # Source: Chips and Cheese, AMD
      # AMD: 160 entry Physical Register File in Figure 6
      # Source: jiegec, 144 speculative
      vrf: 160-entry FP/Vector Register File
    }

    # Source: Chips and Cheese, AMD
    # Source: jiegec, 64(=16*4) sched size for alu
    sched1: 16-entry ALU Scheduler \#1

    # Source: Chips and Cheese
    pipe1: Pipe \#1 {
      ALU
      Branch
    }
    sched1 -> rf -> pipe1

    # Source: Chips and Cheese, AMD
    sched2: 16-entry ALU Scheduler \#2

    # Source: Chips and Cheese
    pipe2: Pipe \#2 {
      ALU
      INT MUL
    }
    sched2 -> rf -> pipe2

    # Source: Chips and Cheese, AMD
    sched3: 16-entry ALU Scheduler \#3

    # Source: Chips and Cheese
    pipe3: Pipe \#3 {
      ALU
      INT DIV
      CRC
    }
    sched3 -> rf -> pipe3

    # Source: Chips and Cheese, AMD
    sched4: 16-entry ALU Scheduler \#4

    # Source: Chips and Cheese
    pipe4: Pipe \#4 {
      ALU
      Branch
    }
    sched4 -> rf -> pipe4

    # Source: Chips and Cheese, AMD
    # Source: jiegec, 28 sched size for load & store
    sched5: 28-entry AGU Scheduler \#5

    # Source: Chips and Cheese
    pipe5: Pipe \#5 {
      Load AGU
      Store AGU
    }
    sched5 -> rf -> pipe5

    # Source: Chips and Cheese
    pipe6: Pipe \#6 {
      Load AGU
      Store AGU
    }
    sched5 -> rf -> pipe6

    # Source: Chips and Cheese
    pipe7: Pipe \#7 {
      Store AGU
    }
    sched5 -> rf -> pipe7

    lsu: LSU {
      # Source: Chips and Cheese
      # 44-entry Pre-L1D Access Load Queue
      # (44+72)-entry Load Queue
      # Source: AMD: "The LS unit includes a 44-entry load queue (LDQ)"
      # Source: jiegec, see /data/zen2/lsu.csv:
      # pattern 0: spike at 116, equals to 44+72
      72-entry Load Queue
      # Source: Chips and Cheese, AMD
      # AMD: "The LS unit utilizes a 48-entry store queue which holds stores
      # from dispatch until the store data can be written to the data cache."
      # Source: jiegec, see /data/zen2/lsu.csv, pattern 2 & 3, spike at 48
      48-entry Store Queue

      # Source: jiegec
      # Source: AMD
      # "The LS unit contains three largely independent pipelines enabling the
      # execution of two 256-bit load memory operations and one 256-bit store
      # memory operation per cycle."
      2x 256b Load Pipe
      1x 256b Store Pipe

      # Source: jiegec, AMD
      # AMD: "4-cycle load-to-use integer load latency and 7-cycle load-to-use FP load latency"
      4 cycle load to use latency
      7 cycle load to FP use latency
    }

    pipe5 -> lsu
    pipe6 -> lsu
    pipe7 -> lsu

    rob -> sched1
    rob -> sched2
    rob -> sched3
    rob -> sched4
    rob -> sched5

    # Source: Chips and Cheese
    # Source: jiegec, 100(64+36) sched size for fp
    nsq: 64-entry Non/Pre-Scheduling Queue
    rob -> nsq

    # Source: Chips and Cheese
    sched6: 36-entry Vector/FP Scheduler \#6
    nsq -> sched6

    # Source: Chips and Cheese
    pipe8: Pipe \#8 {
      FMA
      INT Vec ALU
      INT Vec MUL
      AES
    }
    sched6 -> rf -> pipe8

    # Source: Chips and Cheese
    pipe9: Pipe \#9 {
      FADD
      INT Vec ALU
      Vec Shuffle
      AES
    }
    sched6 -> rf -> pipe9

    # Source: Chips and Cheese
    pipe10: Pipe \#10 {
      FADD
      FStore
      Vec Shuffle
      Vec Shift
    }
    sched6 -> rf -> pipe10 -> lsu

    # Source: Chips and Cheese
    pipe11: Pipe \#11 {
      FADD
      INT Vec ALU
      FDIV
    }
    sched6 -> rf -> pipe11
  }
  frontend.rename -> backend.rob
  frontend.rename -> backend.bob

  mem: Memory {
    l1: L1 DC {
      # Source: Chips and Cheese, AMD
      l1dtlb: 64-entry L1 DTLB

      # Source: Chips and Cheese, AMD
      l2dtlb: 2048-entry L2 DTLB

      # Source: Chips and Cheese, AMD
      l1dc: 32KB 8-way L1DC

      # Source: Chips and Cheese
      mshr: 22-entry MSHR

      # Source: AMD
      ptw: 2 Page Table Walkers
    }

    l2: L2 {
      # Source: Chips and Cheese, AMD
      l2dc: 512KB 8-way L2 Cache
    }

    # Source: Chips and Cheese
    l1 -> l2: 32B/cycle

    l3: L3 {
      # Source: Chips and Cheese
      l3dc: 16MB 16-way L3 Cache
    }
    l2 -> l3
  }
  frontend.l1ic -> mem.l2
  backend.lsu -> mem.l1

  info: |md
    Drawn by Jiajie Chen @jiegec

    Based on data from Chips and Cheese, Anandtech and AMD
  |
}
