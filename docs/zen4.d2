cpu : AMD Zen4 CPU {
  frontend: Frontend {
    bp: Branch Predictor {
      # Source: Chips and Cheese, AMD
      # "The L1 BTB has 1536 entries and predicts with zero prediction bubbles
      # for conditional and unconditional direct branches, and one cycle bubble
      # for calls, returns and indirect branches. The L2 BTB has 7680 entries
      # and creates three prediction bubbles if its prediction differs from that
      # of the L1 BTB."
      l1btb: 1536-entry L1 BTB, zero bubble

      # Source: Chips and Cheese, AMD
      l2btb: 7168/7680-entry L2 BTB, three bubble

      # Source: Chips and Cheese, AMD
      # "The processor implements a 3072-entry indirect target array"
      indir: 3072-entry Indirect Target Array

      # Source: Chips and Cheese, AMD
      # "The processor implements a 32-entry return address stack (RAS) per thread"
      ras: 32-entry Return Address Stack

      # Source: AMD
      2 taken predictions per cycle
    }

    l1ic: L1 IC {
      # Source: Chips and Cheese, AMD
      l1itlb: 64-entry L1 ITLB

      # Source: Chips and Cheese, AMD
      l2itlb: 512-entry L2 ITLB

      # Source: Chips and Cheese, AMD
      l1ic: 32KB 8-way L1 IC
    }

    fq: Fetch Queue
    bp -> fq
    fq -> l1ic

    # Source: AMD
    # "The fetch unit sends these bytes to the decode unit through a 24 entry
    # Instruction Byte Queue (IBQ), each entry holding 16 instruction bytes. In
    # SMT mode each thread has 12 dedicated IBQ entries."
    iq: 24x 16B Instruction Queue
    # Source: AMD
    # "The processor fetches instructions from the instruction cache in 32-byte
    # blocks that are 16-byte aligned and contained within a 64-byte aligned
    # block. The processor can perform a 32-byte fetch every cycle."
    l1ic -> iq: 32B/cycle

    # Source: Chips and Cheese, AMD
    decode: 4-way Decode
    iq -> decode

    # Source: Chips and Cheese, AMD
    # "The Op Cache is organized as an associative cache with 64 sets and 12
    # ways. At each set-way intersection is an entry containing up to 9 macro
    # ops."
    uopc: 768-entry 12-way, 9 mops/entry UOP Cache
    decode -> uopc
    bp -> uopc

    # Source: Chips and Cheese
    uop: UOP Queue
    uopc -> uop
    decode -> uop

    # Source: Chips and Cheese
    rename: 6-way Rename {
      Move Elimination
      Zero Idiom
    }
    uop -> rename
  }

  backend: Backend {
    # Source: Chips and Cheese, AMD
    # "The unit can receive up to 6 macro ops dispatched per cycle and track up
    # to 320 macro ops in-flight in non- SMT mode or 160 per thread in SMT mode"
    rob: 320-entry ROB

    # Source: Chips and Cheese
    bob: 62-taken-entry 118-not-taken-entry Branch Order Buffer

    rf: Register File {
      # Source: Chips and Cheese, AMD
      # "The integer physical register file (PRF) consists of 224 registers,
      # with up to 38 per thread mapped to architectural state or
      # micro-architectural temporary state. "
      irf: 224-entry Integer Register File

      # Source: Chips and Cheese, AMD
      # 238 reported by Chips and Cheese
      # 126 reported by AMD
      flagsrf: 126-entry Flags Register File

      # Source: Chips and Cheese, AMD
      vmaskrf: (52+16)-entry Vector Mask Register File

      # Source: Chips and Cheese, AMD
      vrf: 192-entry 512b Vector Register File
    }

    # Source: Chips and Cheese, AMD
    sched1: 24-entry Scheduler \#1

    # Source: Chips and Cheese
    pipe1: Pipe \#1 {
      ALU
    }
    sched1 -> rf -> pipe1

    # Source: Chips and Cheese
    pipe2: Pipe \#2 {
      Branch
    }
    sched1 -> rf -> pipe2

    # Source: Chips and Cheese, AMD
    sched2: 24-entry Scheduler \#2

    # Source: Chips and Cheese
    pipe3: Pipe \#3 {
      ALU
    }
    sched2 -> rf -> pipe3

    # Source: Chips and Cheese
    pipe4: Pipe \#4 {
      AGU
    }
    sched2 -> rf -> pipe4

    # Source: Chips and Cheese, AMD
    sched3: 24-entry Scheduler \#3

    # Source: Chips and Cheese
    pipe5: Pipe \#5 {
      ALU
    }
    sched3 -> rf -> pipe5

    # Source: Chips and Cheese
    pipe6: Pipe \#6 {
      AGU
    }
    sched3 -> rf -> pipe6

    # Source: Chips and Cheese, AMD
    sched4: 24-entry Scheduler \#4

    # Source: Chips and Cheese
    pipe7: Pipe \#7 {
      ALU
      Branch
    }
    sched4 -> rf -> pipe7

    # Source: Chips and Cheese
    pipe8: Pipe \#8 {
      AGU
    }
    sched4 -> rf -> pipe8

    lsu: LSU {
      # Source: Chips and Cheese, AMD
      # 136 (Load Validation Queue) & 88 (Load Execution Queue) reported by Chips and Cheese
      # 88 reported by AMD
      # "The LS can track up to 48 uncompleted loads and up to 88 completed
      # loads."
      136-entry Load Validation Queue
      88-entry Load (Execution) Queue
      # "The LS unit utilizes a 64-entry store queue (STQ) which holds stores
      # from dispatch until the store data can be written to the data cache."
      64-entry Store Queue

      # Source: AMD
      # 3 loads per cycle (max 2 if 256b)
      # 2 stores per cycle (max 1 if 256b)
      3 Load per cycle (2 if 256b)
      2 Store per cycle (1 if 256b)

      # Source: AMD
      # "4-cycle load-to-use integer load latency and 7-cycle load-to-use FP load latency."
      4 cycle load to use latency
      7 cycle load to FP use latency
    }

    pipe4 -> lsu
    pipe6 -> lsu
    pipe8 -> lsu

    rob -> sched1
    rob -> sched2
    rob -> sched3
    rob -> sched4

    # Source: Chips and Cheese, AMD
    nsq: 64-entry Non/Pre-Scheduling Queue
    rob -> nsq

    # Source: Chips and Cheese, AMD
    sched5: 32-entry Scheduler \#5
    nsq -> sched5

    # Source: Chips and Cheese
    pipe9: Pipe \#9 {
      FMA
    }
    sched5 -> rf -> pipe9

    # Source: Chips and Cheese
    pipe10: Pipe \#10 {
      FADD
    }
    sched5 -> rf -> pipe10

    # Source: Chips and Cheese
    pipe11: Pipe \#11 {
      FStore
      F2I
    }
    sched5 -> rf -> pipe11 -> lsu

    # Source: Chips and Cheese, AMD
    sched6: 32-entry Scheduler \#6
    nsq -> sched6

    # Source: Chips and Cheese
    pipe12: Pipe \#12 {
      FMA
    }
    sched6 -> rf -> pipe12

    # Source: Chips and Cheese
    pipe13: Pipe \#13 {
      FADD
    }
    sched6 -> rf -> pipe13

    # Source: Chips and Cheese, AMD
    pipe14: Pipe \#14 {
      # FStore + F2I reported by Chips and Cheese
      # FStore reported by AMD
      FStore
    }
    sched6 -> rf -> pipe14 -> lsu
  }
  frontend.rename -> backend.rob
  frontend.rename -> backend.bob

  mem: Memory {
    l1: L1 DC {
      # Source: Chips and Cheese, AMD
      l1dtlb: 72-entry L1 DTLB

      # Source: Chips and Cheese, AMD
      l2dtlb: 3072-entry L2 DTLB

      # Source: Chips and Cheese, AMD
      l1dc: 32KB 8-way L1DC
    }

    l2: L2 {
      # Source: Chips and Cheese, AMD
      l2dc: 1MB 8-way L2 Cache, 14 cycle latency
    }

    # Source: Chips and Cheese, AMD
    l1 -> l2: 32B/cycle

    l3: L3 {
      # Source: Chips and Cheese, AMD
      l3dc: 32MB (4MB/core) 16-way L3 Cache, 50 cycle latency
    }
    l2 -> l3
  }
  frontend.l1ic -> mem.l2
  backend.lsu -> mem.l1

  info: |md
    Drawn by Jiajie Chen @jiegec

    Based on data from Chips and Cheese, Anandtech and AMD
  |
}