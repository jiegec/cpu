cpu : ARM Cortex-X1 CPU {
  frontend: Frontend {
    bp: Branch Predictor {
      # Source: ARM, JamesAslan
      # "50% larger L0-BTB capacity, 96 entries (zero-cycle bubble taken-branch latency)"
      l1btb: 48x2-entry L1 BTB, 1 cycle latency, two taken branches per cycle

      # Source: JamesAslan
      l2btb: 4Kx2-entry L2 BTB, 2 cycle latency, two taken branches every 2 cycles

      # Source: JamesAslan
      ras: 16-entry RAS
    }

    l1ic: L1 IC {
      # Source: JamesAslan
      # Source: ARM
      l1itlb: 48-entry fully-associative L1 ITLB

      # Source: ARM
      l1ic: 4-way 64KB L1 IC
    }

    fq: Fetch Queue
    bp -> fq
    fq -> l1ic

    iq: Instruction Queue
    # "5 instruction fetch from the instruction cache"
    # "Instructions are first fetched and then decoded into internal
    # Macro-OPerations (MOPs). From there, the MOPs proceed through register
    # renaming and dispatch stages. A MOP can be split into two Micro-
    # OPerations (µOPs) further down the pipeline after the decode stage. Once
    # dispatched, µOPs wait for their operands and issue out-of-order to one of
    # fifteen issue pipelines. Each issue pipeline can accept one µOP per
    # cycle."
    l1ic -> iq: 5 inst/cycle

    # Source: ARM
    decode: 5-way Decode
    iq -> decode

    # Source: ARM
    # "3K entries, for increased coverage"
    mopc: 3072-entry 4-way skewed-associative MOP Cache
    decode -> mopc
    bp -> mopc

    mop: MOP Queue

    # Source: ARM
    # "8 Mop fetch from the Mop cache"
    mopc -> mop: 8 macro ops/cycle
    decode -> mop: 5 instructions/cycle

    # Source: ARM
    # "The dispatch stage can process up to 8 MOPs per cycle and dispatch up to
    # 16 µOPs per cycle, with the following limitations ..."
    rename: 8-way Rename {
      Zero Idiom
    }
    mop -> rename
  }

  backend: Backend {
    # Source: ARM
    # "224 entry instruction window"
    rob: 224-entry ROB

    rf: Register File {
      irf: Integer Register File

      flagsrf: Flags Register File

      vrf: FP/Vector Register File
    }

    # Source: ARM
    sched1: ALU Scheduler

    # Source: ARM
    pipe1: Pipe \#1 {
      Branch
    }
    rob -> sched1 -> rf -> pipe1

    # Source: ARM
    pipe2: Pipe \#2 {
      Branch
    }
    rob -> sched1 -> rf -> pipe2

    # Source: ARM
    pipe3: Pipe \#3 {
      ALU
    }
    rob -> sched1 -> rf -> pipe3

    # Source: ARM
    pipe4: Pipe \#4 {
      ALU
    }
    rob -> sched1 -> rf -> pipe4

    # Source: ARM
    pipe5: Pipe \#5 {
      ALU
      MUL
    }
    rob -> sched1 -> rf -> pipe5

    # Source: ARM
    pipe6: Pipe \#6 {
      ALU
      MAC
      DIV
    }
    rob -> sched1 -> rf -> pipe6

    # Source: ARM
    sched2: FP/Vector Scheduler

    # Source: ARM
    pipe7: Pipe \#7 {
      FMUL
      FADD
      FDIV
      Vec ALU
      IMAC
    }
    rob -> sched2 -> rf -> pipe7

    # Source: ARM
    pipe8: Pipe \#8 {
      FMUL
      FADD
      Vec ALU
    }
    rob -> sched2 -> rf -> pipe8

    # Source: ARM
    pipe9: Pipe \#9 {
      FMUL
      FADD
      FDIV
      Vec ALU
      IMAC
    }
    rob -> sched2 -> rf -> pipe9

    # Source: ARM
    pipe10: Pipe \#10 {
      FMUL
      FADD
      Vec ALU
    }
    rob -> sched2 -> rf -> pipe10

    # Source: ARM
    sched3: Memory Scheduler

    # Source: ARM
    pipe11: Pipe \#11 {
      Store Data
    }
    rob -> sched3 -> rf -> pipe11

    # Source: ARM
    pipe12: Pipe \#12 {
      Store Data
    }
    rob -> sched3 -> rf -> pipe12

    # Source: ARM
    pipe13: Pipe \#13 {
      Load AGU
      Store AGU
    }
    rob -> sched3 -> rf -> pipe13

    # Source: ARM
    pipe14: Pipe \#14 {
      Load AGU
      Store AGU
    }
    rob -> sched3 -> rf -> pipe14

    # Source: ARM
    pipe15: Pipe \#15 {
      Load AGU
    }
    rob -> sched3 -> rf -> pipe15

    lsu: LSU {
      Load Queue
      Store Queue
      4 load to use integer latency
      6 load to use fp latency
      3 load/cycle
      2 store/cycle
    }

    pipe11 -> lsu
    pipe12 -> lsu
    pipe13 -> lsu
    pipe14 -> lsu
    pipe15 -> lsu
  }
  frontend.rename -> backend.rob

  mem: Memory {
    l1: L1 DC {
      # Source: ARM
      l1dtlb: 40-entry fully associative L1 DTLB

      # Source: ARM
      l1dc: 64KB L1 DC

      # Source: ARM
      l2tlb: 2048-entry 8-way associative 4-bank L2 TLB
    }

    l2: L2 {
      # Source: ARM
      512KB/1MB 8-way L2 Cache
    }

    l1 -> l2

    l3: L3 {
    }
    l2 -> l3
  }
  frontend.l1ic -> mem.l2
  backend.lsu -> mem.l1

  info: |md
    Drawn by Jiajie Chen @jiegec

    Based on data from ARM, JamesAslan, Anandtech and Wikichip
  |
}